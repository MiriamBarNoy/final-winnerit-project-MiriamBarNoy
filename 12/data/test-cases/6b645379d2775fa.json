{"uid":"6b645379d2775fa","name":"test_get_users[8-last_name-bla]","fullName":"tests.api.test_users_api#test_get_users","historyId":"342f01463c35b57c3fa2312b1282f7f0","time":{"start":1736878938840,"stop":1736878938897,"duration":57},"status":"failed","statusMessage":"AssertionError: assert 'Ferguson' == 'bla'\n  \n  - bla\n  + Ferguson","statusTrace":"user_id = 8, field = 'last_name', value = 'bla'\nusers_end_point = 'https://reqres.in/api/users'\n\n    @allure.feature(\"API users tests\")\n    @allure.story(\"get user by ID\")\n    @pytest.mark.api\n    @pytest.mark.parametrize(\"user_id,field,value\",users_data)\n    def test_get_users(user_id,field,value, users_end_point):\n        response = requests.get(f'{users_end_point}/{user_id}')\n        assert response.status_code == 200\n        assert response.reason == \"OK\"\n        json_data = response.json()\n        actual_value = json_data.get(\"data\", {}) # this will access the data on json where above fields are\n        for key in field.split('.'): #this will split the field string to a list of keys,e.g: \"data.email\", =['data', 'email']\n            actual_value = actual_value.get(key, None)\n>           assert actual_value == value\nE           AssertionError: assert 'Ferguson' == 'bla'\nE             \nE             - bla\nE             + Ferguson\n\ntests/api/test_users_api.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1736878936851,"stop":1736878936851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1736878936851,"stop":1736878936851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1736878936851,"stop":1736878936851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1736878936851,"stop":1736878936851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_session_faker","time":{"start":1736878936851,"stop":1736878936852,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users_end_point","time":{"start":1736878938840,"stop":1736878938840,"duration":0},"status":"passed","steps":[{"name":"navigate to users page:","time":{"start":1736878938840,"stop":1736878938840,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"base_url_api","time":{"start":1736878938840,"stop":1736878938840,"duration":0},"status":"passed","steps":[{"name":"navigate to base page for api tests:","time":{"start":1736878938840,"stop":1736878938840,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"get user by ID"},{"name":"feature","value":"API users tests"},{"name":"tag","value":"api"},{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_users_api"},{"name":"host","value":"fv-az798-793"},{"name":"thread","value":"6016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_users_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"field","value":"'last_name'"},{"name":"user_id","value":"8"},{"name":"value","value":"'bla'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"dd55bb5f879886b4","reportUrl":"https://MiriamBarNoy.github.io/final-winnerit-project-MiriamBarNoy/11//#testresult/dd55bb5f879886b4","status":"failed","statusDetails":"AssertionError: assert 'Ferguson' == 'bla'\n  \n  - bla\n  + Ferguson","time":{"start":1736878832254,"stop":1736878832278,"duration":24}},{"uid":"4e8cc0ae9d649397","reportUrl":"https://MiriamBarNoy.github.io/final-winnerit-project-MiriamBarNoy/10//#testresult/4e8cc0ae9d649397","status":"failed","statusDetails":"AssertionError: assert 'Ferguson' == 'bla'\n  \n  - bla\n  + Ferguson","time":{"start":1736876903974,"stop":1736876904015,"duration":41}},{"uid":"14231abe3517e2d6","reportUrl":"https://MiriamBarNoy.github.io/final-winnerit-project-MiriamBarNoy/9//#testresult/14231abe3517e2d6","status":"failed","statusDetails":"AssertionError: assert 'Ferguson' == 'bla'\n  \n  - bla\n  + Ferguson","time":{"start":1736862398606,"stop":1736862398895,"duration":289}}]},"tags":["api"]},"source":"6b645379d2775fa.json","parameterValues":["'last_name'","8","'bla'"]}